
## 📝 **Emergency Drone Coordination System - Rapor**

### 1. Tasarım Kararları 

Bu projede temel amacımız, bir afet bölgesinde kurtarılması gereken kazazedeleri (survivor) otonom drone’larla koordine bir şekilde bulmak ve yardım ulaştırmak üzerine bir simülasyon gerçekleştirmektir. Tasarım sürecinde aşağıdaki temel kararlar alınmıştır:

* **Modülerlik**: Kod yapısı `drone`, `survivor`, `ai`, `list`, `view` gibi farklı dosyalara bölünerek sorumluluklar ayrılmış ve kodun sürdürülebilirliği artırılmıştır.

* **İki modlu yapı**:

  * **Simülasyon Modu (`main.c`)**: Dronlar, survivor’lar ve yapay zeka aynı proses içerisinde farklı thread’ler olarak çalışır. SDL ile görsel arayüz oluşturulmuştur.
  * **Client-Server Modu (`client.c`, `server.c`)**: Gerçek bir soket bağlantısı kurularak her drone bağımsız bir istemci gibi çalışır. Bu mimari, dağıtık sistemleri test etmeye olanak tanır.

* **Thread-safe liste**: Survivor’ların tutulduğu `List` yapısı mutex ile korunarak çoklu thread erişimine uygun hale getirilmiştir.

* **JSON veri formatı**: Drone-server iletişiminde veri aktarımı için insan tarafından okunabilir ve sistemler arası uyumlu olan JSON benzeri mesaj yapıları tercih edilmiştir.

* **Koordinat tabanlı görevler**: Her drone’un hedefi (survivor) belirli bir `(x, y)` koordinatıdır. Görev atamaları bu koordinatlar üzerinden yapılır.

---

### 2. Senkronizasyon Stratejisi 
Çok iş parçacıklı bir yapıda veri tutarlılığı sağlamak için senkronizasyon hayati önemdedir. Projede kullanılan senkronizasyon stratejileri şunlardır:

#### a. `pthread_mutex_t` kullanımı:

* `List` yapısı içinde (`list.c`) `pthread_mutex_t` ile listeye erişim senkronize edilmiştir:

  * `list_add()`, `list_pop()` ve `list_destroy()` fonksiyonları mutex ile korunmuştur.
* Survivor’lar listeye her 2 saniyede bir eklenirken, AI thread’i listeyi tarayarak görev ataması yapar. Bu eşzamanlı erişimler mutex ile düzenlenmiştir.

#### b. Drone verilerinde kilitleme:

* Her drone’un (`drone.h`) kendi `pthread_mutex_t lock` değişkeni vardır.
* `drone_behavior()` içinde konum ve durum güncellenmeden önce lock alınır.
* Aynı şekilde `mission_assigner()` (AI) görev atarken drone’un verisini korumak için önce lock alır.

#### c. Görselleştirme sırasında senkronizasyon:

* `render_scene()` içinde survivor listesi ve drone verileri okunurken lock’lar alınır. Böylece render sırasında inconsistent veri okunmaz.

#### d. Client-Server modunda:

* Her drone istemcisi ayrı bir thread’te `server.c` içinde `handle_drone()` ile karşılanır. Socket iletişiminde thread senkronizasyonundan çok veri iletimi esastır. Ancak `write()` ve `read()` fonksiyonları kendi içinde atomik olduğu için thread-safe çalışır.

---

### 3. Performans Analizi 

Proje temel olarak düşük gecikmeli ve hızlı tepki veren bir sistem hedeflemektedir. Performans açısından değerlendirme şu şekilde yapılabilir:

#### a. **Thread kullanımı ve ölçeklenebilirlik:**

* Simülasyon modunda her drone, survivor üretici ve AI ayrı thread’lerde çalışır. Böylece paralel çalışmaya uygun bir yapı sağlanır.
* Thread sayısı arttıkça performans, çekirdek sayısına bağlı olarak pozitif ölçeklenebilir.

#### b. **Görev atama verimliliği:**

* `mission_assigner()` her saniyede bir survivor listesine bakar ve uygun dronlara görev atar.
* Atama algoritması, boşta olan en yakın drone'u seçer. Bu da daha kısa görev süreleri ve dengeli görev dağılımı sağlar.

#### c. **Veri yapıları ve gecikmeler:**

* Liste yapısı basit tek yönlü bağlı liste olduğu için `O(n)` tarama süresi vardır. Büyük survivor sayılarında bu darboğaz olabilir.
* Mutex kullanımı nedeniyle liste erişimi sırasında thread’ler bekleyebilir. Ancak görev atamaları nadiren yapıldığı için bu etki minimumdur.

#### d. **Görselleştirme etkisi:**

* SDL `render_scene()` her 100ms’de bir çalışır. Bu sık güncelleme düşük FPS makinelerde gecikmeye neden olabilir. Ancak bu süre artırılarak uyarlanabilir.

#### e. **Client-server gecikmesi:**

* TCP soketleri kullanıldığı için ağ üzerinden çalışırken görev alma/gönderme gecikmesi 1-2ms düzeyindedir. Gecikme `sleep()` komutları ile simüle edilmiştir.

---

## 📌 SONUÇ

Bu proje, hem çok iş parçacıklı hem de dağıtık sistemlere uygun bir yapıyı küçük ölçekte başarıyla simüle etmektedir. Senkronizasyon doğru şekilde uygulanmış ve görev dağılımında verim sağlanmıştır. Kullanılan yapılar sayesinde genişletilebilir ve gerçek zamanlı senaryolara entegre edilebilir hale gelmiştir.

